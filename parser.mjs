// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "armonia";
  var peg$c1 = "acordes";
  var peg$c2 = ";";
  var peg$c3 = "tempo";
  var peg$c4 = "t";
  var peg$c5 = "compas";
  var peg$c6 = "c";
  var peg$c7 = "volumen";
  var peg$c8 = "v";
  var peg$c9 = "paneo";
  var peg$c10 = "p";
  var peg$c11 = "bajo";
  var peg$c12 = "teclado2";
  var peg$c13 = "teclado";
  var peg$c14 = "bombo";
  var peg$c15 = "contras";
  var peg$c16 = "contratiempos";
  var peg$c17 = "contratiempo";
  var peg$c18 = "congas";
  var peg$c19 = "(";
  var peg$c20 = ",";
  var peg$c21 = ")";
  var peg$c22 = "sonido";
  var peg$c23 = "s";
  var peg$c24 = "octava";
  var peg$c25 = "o";
  var peg$c26 = "notas";
  var peg$c27 = "n";
  var peg$c28 = "parte";
  var peg$c29 = "tumbao";
  var peg$c30 = "acompa\xF1amiento";
  var peg$c31 = "acompanamiento";
  var peg$c32 = "ritmo";
  var peg$c33 = "|";
  var peg$c34 = "[";
  var peg$c35 = "]";
  var peg$c36 = "\"";
  var peg$c37 = "~";
  var peg$c38 = "mayor";
  var peg$c39 = "maj";
  var peg$c40 = "min";
  var peg$c41 = "menor";
  var peg$c42 = "#";
  var peg$c43 = "bb";
  var peg$c44 = "do";
  var peg$c45 = "re";
  var peg$c46 = "mi";
  var peg$c47 = "fa";
  var peg$c48 = "sol";
  var peg$c49 = "la";
  var peg$c50 = "si";
  var peg$c51 = "/";
  var peg$c52 = "^";
  var peg$c53 = "_";
  var peg$c54 = "\uD834\uDD5D";
  var peg$c55 = "\uD834\uDD5E";
  var peg$c56 = "\uD834\uDD5F";
  var peg$c57 = "\uD834\uDD60";
  var peg$c58 = "\uD834\uDD61";
  var peg$c59 = "\uD834\uDD3B";
  var peg$c60 = "\uD834\uDD3C";
  var peg$c61 = "\uD834\uDD3D";
  var peg$c62 = "\uD834\uDD3E";
  var peg$c63 = "\uD834\uDD3F";
  var peg$c64 = ".";

  var peg$r0 = /^[Mm]/;
  var peg$r1 = /^[bx]/;
  var peg$r2 = /^[A, B, C, D, E, F, G]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[a-z]/;
  var peg$r5 = /^[a-z]/i;
  var peg$r6 = /^[ \t\r\n]/;

  var peg$e0 = peg$literalExpectation("armonia", false);
  var peg$e1 = peg$literalExpectation("acordes", false);
  var peg$e2 = peg$literalExpectation(";", false);
  var peg$e3 = peg$literalExpectation("tempo", false);
  var peg$e4 = peg$literalExpectation("t", false);
  var peg$e5 = peg$literalExpectation("compas", false);
  var peg$e6 = peg$literalExpectation("c", false);
  var peg$e7 = peg$literalExpectation("volumen", false);
  var peg$e8 = peg$literalExpectation("v", false);
  var peg$e9 = peg$literalExpectation("paneo", false);
  var peg$e10 = peg$literalExpectation("p", false);
  var peg$e11 = peg$literalExpectation("bajo", false);
  var peg$e12 = peg$literalExpectation("teclado2", false);
  var peg$e13 = peg$literalExpectation("teclado", false);
  var peg$e14 = peg$literalExpectation("bombo", false);
  var peg$e15 = peg$literalExpectation("contras", false);
  var peg$e16 = peg$literalExpectation("contratiempos", false);
  var peg$e17 = peg$literalExpectation("contratiempo", false);
  var peg$e18 = peg$literalExpectation("congas", false);
  var peg$e19 = peg$literalExpectation("(", false);
  var peg$e20 = peg$literalExpectation(",", false);
  var peg$e21 = peg$literalExpectation(")", false);
  var peg$e22 = peg$literalExpectation("sonido", false);
  var peg$e23 = peg$literalExpectation("s", false);
  var peg$e24 = peg$literalExpectation("octava", false);
  var peg$e25 = peg$literalExpectation("o", false);
  var peg$e26 = peg$literalExpectation("notas", false);
  var peg$e27 = peg$literalExpectation("n", false);
  var peg$e28 = peg$literalExpectation("parte", false);
  var peg$e29 = peg$literalExpectation("tumbao", false);
  var peg$e30 = peg$literalExpectation("acompa\xF1amiento", false);
  var peg$e31 = peg$literalExpectation("acompanamiento", false);
  var peg$e32 = peg$literalExpectation("ritmo", false);
  var peg$e33 = peg$literalExpectation("|", false);
  var peg$e34 = peg$literalExpectation("[", false);
  var peg$e35 = peg$literalExpectation("]", false);
  var peg$e36 = peg$literalExpectation("\"", false);
  var peg$e37 = peg$literalExpectation("~", false);
  var peg$e38 = peg$literalExpectation("mayor", false);
  var peg$e39 = peg$literalExpectation("maj", false);
  var peg$e40 = peg$literalExpectation("min", false);
  var peg$e41 = peg$literalExpectation("menor", false);
  var peg$e42 = peg$classExpectation(["M", "m"], false, false);
  var peg$e43 = peg$literalExpectation("#", false);
  var peg$e44 = peg$literalExpectation("bb", false);
  var peg$e45 = peg$classExpectation(["b", "x"], false, false);
  var peg$e46 = peg$classExpectation(["A", ",", " ", "B", ",", " ", "C", ",", " ", "D", ",", " ", "E", ",", " ", "F", ",", " ", "G"], false, false);
  var peg$e47 = peg$literalExpectation("do", false);
  var peg$e48 = peg$literalExpectation("re", false);
  var peg$e49 = peg$literalExpectation("mi", false);
  var peg$e50 = peg$literalExpectation("fa", false);
  var peg$e51 = peg$literalExpectation("sol", false);
  var peg$e52 = peg$literalExpectation("la", false);
  var peg$e53 = peg$literalExpectation("si", false);
  var peg$e54 = peg$literalExpectation("/", false);
  var peg$e55 = peg$literalExpectation("^", false);
  var peg$e56 = peg$literalExpectation("_", false);
  var peg$e57 = peg$literalExpectation("\uD834\uDD5D", false);
  var peg$e58 = peg$literalExpectation("\uD834\uDD5E", false);
  var peg$e59 = peg$literalExpectation("\uD834\uDD5F", false);
  var peg$e60 = peg$literalExpectation("\uD834\uDD60", false);
  var peg$e61 = peg$literalExpectation("\uD834\uDD61", false);
  var peg$e62 = peg$literalExpectation("\uD834\uDD3B", false);
  var peg$e63 = peg$literalExpectation("\uD834\uDD3C", false);
  var peg$e64 = peg$literalExpectation("\uD834\uDD3D", false);
  var peg$e65 = peg$literalExpectation("\uD834\uDD3E", false);
  var peg$e66 = peg$literalExpectation("\uD834\uDD3F", false);
  var peg$e67 = peg$literalExpectation(".", false);
  var peg$e68 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e69 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e70 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e71 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);

  var peg$f0 = function() {return datosDelPrograma };
  var peg$f1 = function(k, v) {
          if (v.length == 0) {
           return error(k + ' requiere uno o más compases con acordes')
          } else return datosDelPrograma.estadoGlobal.armonia = v
        };
  var peg$f2 = function(k, v) {return datosDelPrograma.estadoGlobal.tempo = v};
  var peg$f3 = function(k, v) {return datosDelPrograma.estadoGlobal.compas = v};
  var peg$f4 = function(k, v) {
    if (v >= 0 && v <= 1) {
      return datosDelPrograma.estadoGlobal.volumen = v
  } else {
    error("volumen requiere un número entre 0 y 1");
  }
};
  var peg$f5 = function(k, v) {
   if (v >= 0 && v <= 1) {
      return datosDelPrograma.estadoGlobal.paneo = v
  } else {
    error("paneo requiere un número entre 0 y 1");
  }
  };
  var peg$f6 = function(i, p) {
  if(p == null) {
  let pista = Object.assign({}, i);
  return datosDelPrograma.pistas = [...datosDelPrograma.pistas, completeMusicalObject(pista)];
} else {
  let pista = Object.assign({}, i, ... p);
  return datosDelPrograma.pistas = [...datosDelPrograma.pistas, completeMusicalObject(pista)];
}
};
  var peg$f7 = function(i) { return createProperty("name", i)};
  var peg$f8 = function(i) { return createProperty("name", i)};
  var peg$f9 = function(i) { return createProperty("name", i)};
  var peg$f10 = function(i) {return createProperty("name", i)};
  var peg$f11 = function(i) {return createProperty("name", i)};
  var peg$f12 = function(i) {return createProperty("name", i)};
  var peg$f13 = function(p) {return p};
  var peg$f14 = function(k, v) {return createProperty("sonido", v)};
  var peg$f15 = function(k, v) {
  if (v >= 0 && v <= 1) {
  return createProperty("paneo", v);
  } else {
    error("paneo requiere un número entre 0 y 1");
  }
  };
  var peg$f16 = function(k, v) {
   if (v >= 0 && v <= 1) {
  return createProperty("volumen", normalizarVolumenDeInstrumento(v));
  } else {
    error("volumen requiere un número entre 0 y 1");
  }
  };
  var peg$f17 = function(k, v) {return createProperty("octavaAbsoluta", v)};
  var peg$f18 = function(k, v) {return createProperty("notas", v)};
  var peg$f19 = function(k, v) {
         if (v.length == 0) {
           return error(k + " " + 'requiere uno o más compases')
          } else return createProperty("parte", v)
   };
  var peg$f20 = function(ls) {
     return asignarNumeroDeCompas(ls)
     };
  var peg$f21 = function(ls) {
    let tamanoDelCompas = ls.reduce((acc, obj) => acc + duracionNotaADuracionEnTiempo(obj.duration), 0);
    if (tamanoDelCompas == datosDelPrograma.estadoGlobal.compas) {
      return asignarPosTiempoDeNotasPorCompas(ls);  // [{ time: '1n', note: 'C4', duration: '1n'}, ...]
    } else if (tamanoDelCompas < datosDelPrograma.estadoGlobal.compas) {
      return error('El tamano del compas es menor a ' + datosDelPrograma.estadoGlobal.compas)
    } else if (tamanoDelCompas > datosDelPrograma.estadoGlobal.compas) {
      return error('El tamano del compas es mayor a ' + datosDelPrograma.estadoGlobal.compas)
  }
};
  var peg$f22 = function(v) {
       //let parte = Object.assign({}, v);
       return completeParteObject(v); // { time: '1n', note: 'C4', duration: '1n' }
       };
  var peg$f23 = function(notaOListaDeNotas) { return notaOListaDeNotas || []; };
  var peg$f24 = function(n1, n2, n3, n4, n5) {
return crearAcorde([n1, n2, n3, n4, n5]) };
  var peg$f25 = function() {return null};
  var peg$f26 = function(n) {return [n]};
  var peg$f27 = function(letra, alteracion, octava) {
  if (alteracion == null) {
    return (letra + octava)
  } else {
      return (letra + alteracion + octava)
  }
};
  var peg$f28 = function() {return 'maj'};
  var peg$f29 = function() {return 'min'};
  var peg$f30 = function() {return 'C'};
  var peg$f31 = function() {return 'D'};
  var peg$f32 = function() {return 'E'};
  var peg$f33 = function() {return 'F'};
  var peg$f34 = function() {return 'G'};
  var peg$f35 = function() {return 'A'};
  var peg$f36 = function() {return 'B'};
  var peg$f37 = function(s) {
   let g = createProperty("note", null);
   return Object.assign(s, g)
   };
  var peg$f38 = function(r, o) {
      return Object.assign({}, r, o);
    };
  var peg$f39 = function(f) {
   let g = createProperty("note", 1);
   return Object.assign(f, g)
   };
  var peg$f40 = function(r, o) {
      return Object.assign({}, r, o);
    };
  var peg$f41 = function(f, g) {
    return Object.assign({}, f, g);
    };
  var peg$f42 = function() {return createProperty("octavaRelativa", 1)};
  var peg$f43 = function() {return createProperty("octavaRelativa", (-1))};
  var peg$f44 = function(n) {return createProperty("note", n);};
  var peg$f45 = function() {return createProperty("duration", '1n');};
  var peg$f46 = function() {return createProperty("duration", '2n');};
  var peg$f47 = function() {return createProperty("duration", '4n');};
  var peg$f48 = function() {return createProperty("duration", '8n');};
  var peg$f49 = function() {return createProperty("duration", '16n');};
  var peg$f50 = function() {return createProperty("duration", '1n');};
  var peg$f51 = function() {return createProperty("duration", '2n');};
  var peg$f52 = function() {return createProperty("duration", '4n');};
  var peg$f53 = function() {return createProperty("duration", '8n');};
  var peg$f54 = function() {return createProperty("duration", '16n');};
  var peg$f55 = function(ls) {return ls};
  var peg$f56 = function(ls) {
          if (ls.length == 0) {
           return error('Armonia/acordes requiere uno o más acordes')
          } else return ls
         };
  var peg$f57 = function(letra, alteracion, cualidad) {
  return letra + (alteracion ?? "") + (cualidad ?? "");
};
  var peg$f58 = function(head, tail) {
  const decimalPart = tail ? parseFloat(`0.${tail[1]}`) : 0;
  const result = head + decimalPart
    return result
    };
  var peg$f59 = function() {
  return parseInt(text(), 10);
};
  var peg$f60 = function() { return parseFloat(text()); };
  var peg$f61 = function() { return text(); };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parsepista();
    if (s3 === peg$FAILED) {
      s3 = peg$parseestadoGlobal();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsepista();
      if (s3 === peg$FAILED) {
        s3 = peg$parseestadoGlobal();
      }
    }
    peg$savedPos = s0;
    s0 = peg$f0();

    return s0;
  }

  function peg$parseestadoGlobal() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7) === peg$c0) {
      s2 = peg$c0;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c1) {
        s2 = peg$c1;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parselistaDeAcordesGlobales();
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s6 = peg$c2;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 5) === peg$c3) {
        s2 = peg$c3;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 116) {
          s2 = peg$c4;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseentero();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s6 = peg$c2;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f2(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 6) === peg$c5) {
          s2 = peg$c5;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 99) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parsestring();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c2;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f3(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.substr(peg$currPos, 7) === peg$c7) {
            s2 = peg$c7;
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 118) {
              s2 = peg$c8;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parsedecimal();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f4(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c9) {
              s2 = peg$c9;
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 112) {
                s2 = peg$c10;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              s4 = peg$parsedecimal();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f5(s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepista() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseinstrumentIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parselistaDePropiedades();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s6 = peg$c2;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f6(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstrumentIdentifier() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c13) {
          s1 = peg$c13;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f9(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c14) {
            s1 = peg$c14;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f10(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c15) {
              s1 = peg$c15;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 13) === peg$c16) {
                s1 = peg$c16;
                peg$currPos += 13;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 12) === peg$c17) {
                  s1 = peg$c17;
                  peg$currPos += 12;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f11(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c18) {
                s1 = peg$c18;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f12(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselistaDePropiedades() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsepropiedad();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c20;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parsepropiedad();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c21;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepropiedad() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6) === peg$c22) {
      s2 = peg$c22;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 115) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseentero();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f14(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 5) === peg$c9) {
        s2 = peg$c9;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 112) {
          s2 = peg$c10;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsedecimal();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f15(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 7) === peg$c7) {
          s2 = peg$c7;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 118) {
            s2 = peg$c8;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parsedecimal();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f16(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.substr(peg$currPos, 6) === peg$c24) {
            s2 = peg$c24;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 111) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseentero();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f17(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c26) {
              s2 = peg$c26;
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 110) {
                s2 = peg$c27;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              s4 = peg$parsenotaSola();
              if (s4 === peg$FAILED) {
                s4 = peg$parselistaDeNotas();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f18(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c28) {
                s2 = peg$c28;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e28); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c29) {
                  s2 = peg$c29;
                  peg$currPos += 6;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e29); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 14) === peg$c30) {
                    s2 = peg$c30;
                    peg$currPos += 14;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e30); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 14) === peg$c31) {
                      s2 = peg$c31;
                      peg$currPos += 14;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e31); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c32) {
                        s2 = peg$c32;
                        peg$currPos += 5;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e32); }
                      }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                s4 = peg$parselistaDeCompases();
                s5 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f19(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselistaDeCompases() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parsecompas();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse_();
      s4 = peg$parsecompas();
      if (s4 === peg$FAILED) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
    }
    s3 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f20(s2);

    return s0;
  }

  function peg$parsecompas() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c33;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseparte();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        s6 = peg$parseparte();
        if (s6 === peg$FAILED) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c33;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f21(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparte() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsepartes();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f22(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistaDeNotas() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c34;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parselistaDeNotaOlistaDeNotas();
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c35;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f23(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistaDeNotaOlistaDeNotas() {
    var s0, s1, s2, s3, s4, s5;

    s0 = [];
    s1 = peg$parsenotaOListaDeNotas();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c20;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s2 = peg$parsenotaOListaDeNotas();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    return s0;
  }

  function peg$parsenotaOListaDeNotas() {
    var s0;

    s0 = peg$parsesilencio();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenota();
      if (s0 === peg$FAILED) {
        s0 = peg$parseacorde();
        if (s0 === peg$FAILED) {
          s0 = peg$parselistaDeNotas();
        }
      }
    }

    return s0;
  }

  function peg$parseacorde() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenota();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsenota();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parsenota();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse_();
        s9 = peg$parsenota();
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parse_();
        s11 = peg$parsenota();
        if (s11 === peg$FAILED) {
          s11 = null;
        }
        s12 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 34) {
          s13 = peg$c36;
          peg$currPos++;
        } else {
          s13 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s13 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s3, s5, s7, s9, s11);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesilencio() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenotaSola() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenota();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenota() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseletra();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsealteracion();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseentero();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecualidad() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c39) {
        s0 = peg$c39;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r0.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsealteracion() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c42;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c43) {
        s0 = peg$c43;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.charAt(peg$currPos);
        if (peg$r1.test(s0)) {
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
      }
    }

    return s0;
  }

  function peg$parseletra() {
    var s0;

    s0 = peg$parsealfabetoIngles();
    if (s0 === peg$FAILED) {
      s0 = peg$parsealfabetoLatino();
    }

    return s0;
  }

  function peg$parsealfabetoIngles() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parsealfabetoLatino() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f31();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f32();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s1 = peg$c47;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f33();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c48) {
              s1 = peg$c48;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f34();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c49) {
                s1 = peg$c49;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f35();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c50) {
                  s1 = peg$c50;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e53); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f36();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepartes() {
    var s0;

    s0 = peg$parseritmoMasGradoDelBajoMasOctavaRelativa();
    if (s0 === peg$FAILED) {
      s0 = peg$parseritmoSinGradoDelBajoMasOctavaRelativa();
      if (s0 === peg$FAILED) {
        s0 = peg$parseritmoMasGradoDelBajo();
        if (s0 === peg$FAILED) {
          s0 = peg$parseritmoSinGradoDelBajo();
          if (s0 === peg$FAILED) {
            s0 = peg$parsesilenciosDeFigurasMusicales();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesilenciosDeFigurasMusicales() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsesilencioDeFiguraMusical();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f37(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseritmoSinGradoDelBajoMasOctavaRelativa() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseritmoSinGradoDelBajo();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseoctavaRelativa();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f38(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseritmoSinGradoDelBajo() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsefiguraMusical();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f39(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseritmoMasGradoDelBajoMasOctavaRelativa() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseritmoMasGradoDelBajo();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseoctavaRelativa();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f40(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseritmoMasGradoDelBajo() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsefiguraMusical();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c51;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsegradoDelBajo();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f41(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctavaRelativa() {
    var s0;

    s0 = peg$parseoctavaArriba();
    if (s0 === peg$FAILED) {
      s0 = peg$parseoctavaAbajo();
    }

    return s0;
  }

  function peg$parseoctavaArriba() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 94) {
      s2 = peg$c52;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f42();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctavaAbajo() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 95) {
      s2 = peg$c53;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f43();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegradoDelBajo() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefiguraMusical() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c54) {
      s2 = peg$c54;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f45();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s2 = peg$c55;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f46();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c56) {
          s2 = peg$c56;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f47();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c57) {
            s2 = peg$c57;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e60); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f48();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c58) {
              s2 = peg$c58;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e61); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f49();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesilencioDeFiguraMusical() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c59) {
      s2 = peg$c59;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f50();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c60) {
        s2 = peg$c60;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f51();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c61) {
          s2 = peg$c61;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f52();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c62) {
            s2 = peg$c62;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e65); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f53();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (input.substr(peg$currPos, 2) === peg$c63) {
              s2 = peg$c63;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e66); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f54();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselistaDeAcordesGlobales() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parselistaDeAcordeGlobal();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse_();
      s3 = peg$parselistaDeAcordeGlobal();
      if (s3 === peg$FAILED) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f55(s1);
    s0 = s1;

    return s0;
  }

  function peg$parselistaDeAcordeGlobal() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c33;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$parseacordeGlobal();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        s6 = peg$parseacordeGlobal();
        if (s6 === peg$FAILED) {
          peg$currPos = s5;
          s5 = peg$FAILED;
        } else {
          s5 = s6;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 124) {
        s6 = peg$c33;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f56(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseacordeGlobal() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseletra();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsealteracion();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsecualidad();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f57(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecimal() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseentero();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c64;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseentero();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f58(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentero() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f59();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f60();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f61();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseword() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r5.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r5.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r6.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
    }

    return s0;
  }



function createProperty(key, value) {
  return { [key]: value }; 
}

const datosDelPrograma = {
  estadoGlobal: {
    armonia: ['Cmaj'],
    tempo: 120, 
    compas: 4, 
    volumen: 1, 
    paneo: 0.5
  },
  pistas: []
}

//se debe llamar nota para cuadrar con las notas de Tonejs
const defaultElementoDeParte = {
  time: '0:0:0', 
  note: 'C4',  // nota o grado
  duration: '1n', 
  octavaRelativa: 0
  }
  
const defaultMusicalObject = {
  name: '',
  volumen: 1, // Default volume
  paneo: 0.5, // Default panning
  sonido: 0,
  octavaAbsoluta: 5,
  notas: ['C4'], // Default note
  parte: []
}



function normalizarVolumenDeInstrumento(v){
  return v * datosDelPrograma.estadoGlobal.volumen;
}

function completeMusicalObject(inputObject) {
  // Merge inputObject with defaultMusicalObject
  const completedObject = { ...defaultMusicalObject, ...inputObject };
  
  // Use global volumen and paneo if not set in inputObject
  if (!inputObject.hasOwnProperty('volumen')) {
    completedObject.volumen = datosDelPrograma.estadoGlobal.volumen;
  }
  if (!inputObject.hasOwnProperty('paneo')) {
    completedObject.paneo = datosDelPrograma.estadoGlobal.paneo;
  }
  
   // Execute the octava method
  function octavaAbsolutaf(instrumento){
    if (instrumento === "bajo") {
      return 4;
    } else {
      return 5;
    }
  };
  
  if (!inputObject.hasOwnProperty('octavaAbsoluta')) {
    completedObject.octavaAbsoluta = octavaAbsolutaf(completedObject.name);
    }
    
 
  return completedObject;
}

function crearAcorde(xs){
  return xs.join(" ").trim()
  };
  
function completeParteObject(inputObject) {
  // Merge inputObject with defaultElementoDeParte
  const completedObject = { ...defaultElementoDeParte, ...inputObject };  
  return completedObject;
}

// :: [Object] -> [Object]
function beatCounter(bar) {
  bar.forEach((item, index) => {
    const beat = index % 4; // Ensures the beat is within the 0-3 range (for 4/4 time)
    const barNum = Math.floor(index / 4); // Increments the bar number after every 4 beats
    item.time = `${barNum}:${beat}:0`; // Update the time property
  });
  return bar; // Optional: return the modified array
}
  //:: [Object] -> Int -> [Object]
  //[{ time: '1n', note: 'C4', duration: '1n', size: 1}, ...]
  
function numeroDeCompas(compas, numeroDeCompas){
    compas.forEach((elemento) => {
     let [bar, beat, subBeat] = elemento.time.split(':').map(Number);
      elemento.time = `${numeroDeCompas}:${beat}:${subBeat}`;
  });
}

//:: [Object] -> [Object]
// Convert note duration to time (assuming 4n = 1, 8n = 0.5, etc.)
const duracionNotaADuracionEnTiempo = (duracion) => {
    const duracionMap = {
        '1n': 4,
        '2n': 2,
        '4n': 1,
        '8n': 0.5,
        '16n': 0.25
    };
    return duracionMap[duracion] || 1; // Default to quarter note duration
};


function agregarTiempo(timeProperty, duracion) {
    let [bar, beat, subBeat] = timeProperty.split(':').map(Number);
    
    // Add the duration to the beat
    beat += duracion;

    // Extract the decimal part from the beat and add it to subBeat
    let beatInteger = Math.floor(beat);  // Get the integer part of the beat
    let beatFraction = beat - beatInteger;  // Get the fractional part of the beat

    // Convert the fractional part into subBeat units (assuming 1 beat = 4 subBeats)
    subBeat += beatFraction * 4;

    // Handle overflow of subBeat into beats
    if (subBeat >= 4) { // Assuming sub-beat division of 4 (quarter notes)
        beatInteger += Math.floor(subBeat / 4);
        subBeat %= 4;
    }

    return `${bar}:${beatInteger}:${Math.round(subBeat)}`;
}



// Function to assign time positions to notes, adjusting only beat and sub-beat
function asignarPosTiempoDeNotasPorCompas(compas) {
    compas.forEach((elemento, index) => {
        if (index === 0) {
            elemento.time = elemento.time; // First note keeps its original time
        } else {
            let duracionNotaAnterior = duracionNotaADuracionEnTiempo(compas[index - 1].duration);
            elemento.time = agregarTiempo(compas[index - 1].time, duracionNotaAnterior);
        }
    });

    return compas;
}




function asignarNumeroDeCompas(listaDeCompases){
    listaDeCompases.forEach((compas, index) => {
      numeroDeCompas(compas, index);
    });
    return listaDeCompases;
}
  

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};